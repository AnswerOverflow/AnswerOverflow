import type { NextPage } from "next";
import Head from "next/head";
import { AnswerOverflowLogo, trpc } from "@answeroverflow/ui";
import type { inferProcedureOutput } from "@trpc/server";
import type { AppRouter } from "@answeroverflow/api";
import { ServerInviteDriver } from "@answeroverflow/ui";
const ServerCard: React.FC<{
  server: Exclude<inferProcedureOutput<AppRouter["auth"]["getServers"]>, null | undefined>[0];
}> = ({ server }) => {
  return <ServerInviteDriver server={server} />;
};

// eslint-disable-next-line @typescript-eslint/naming-convention
const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Answer Overflow</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen flex-col items-center  text-white">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-8">
          <AnswerOverflowLogo />
          <AuthShowcase />
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: servers } = trpc.auth.getServers.useQuery();
  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <div className="grid max-h-[70vh] grid-cols-4 gap-4 overflow-y-scroll">
        {servers?.map((server) => {
          return <ServerCard server={server} key={server.id} />;
        })}
      </div>
    </div>
  );
};
