// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// General concept for laying out the fields:
// ids go first, then then fields, then at the bottom are the references to other tables
generator client {
  provider = "prisma-client-js"
  // output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver,
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String          @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String          @unique
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  discordAccount    DiscordAccount? @relation(fields: [providerAccountId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model DiscordAccount {
  id                 String               @id @unique
  name               String
  avatar             String?
  Account            Account?
  userServerSettings UserServerSettings[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserServerSettings {
  userId   String
  serverId String
  bitfield Int    @default(0)

  user   DiscordAccount @relation(fields: [userId], references: [id], onDelete: Cascade)
  server Server         @relation(fields: [serverId], references: [id])

  @@id([userId, serverId])
  @@index([userId])
  @@index([serverId])
}

model IgnoredDiscordAccount {
  id String @id @unique
}

model Server {
  // Discord Data
  id          String  @id @unique
  name        String  @db.VarChar(100)
  icon        String? @db.VarChar(45)
  description String?

  // Answer Overflow Settings
  bitfield   Int       @default(0)
  kickedTime DateTime?

  // Relations
  userServerSettings UserServerSettings[]
  channels           Channel[]
}

model Channel {
  // Discord Data
  id         String  @id
  serverId   String
  name       String  @db.VarChar(100)
  type       Int
  parentId   String?
  inviteCode String? @unique @db.VarChar(15)

  // Answer Overflow Settings
  bitfield             Int     @default(0)
  lastIndexedSnowflake String?
  solutionTagId        String?

  // Relations
  parent  Channel?  @relation("ParentChannel", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  threads Channel[] @relation("ParentChannel")
  server  Server    @relation(fields: [serverId], references: [id])

  @@index([serverId])
  @@index([parentId])
}
