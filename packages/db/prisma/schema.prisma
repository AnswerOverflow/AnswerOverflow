// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// General concept for laying out the fields:
// ids go first, then then fields, then at the bottom are the references to other tables
generator client {
  provider = "prisma-client-js"
  // output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver,
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String          @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String          @unique
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  discordAccount    DiscordAccount? @relation(fields: [providerAccountId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model DiscordAccount {
  id                   String               @id @unique
  name                 String
  avatar               String?
  Account              Account?
  user_server_settings UserServerSettings[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserServerSettings {
  user_id   String
  server_id String
  bitfield  Int    @default(0)

  user   DiscordAccount @relation(fields: [user_id], references: [id])
  server Server         @relation(fields: [server_id], references: [id])

  @@id([user_id, server_id])
}

model IgnoredDiscordAccount {
  id String @id @unique
}

// Servers

model Server {
  id          String    @id @unique
  name        String    @db.VarChar(100)
  icon        String?   @db.VarChar(45)
  kicked_time DateTime?

  user_server_settings UserServerSettings[]
  channels             Channel[]
  server_settings      ServerSettings?
}

model ServerSettings {
  server_id String @id @unique
  bitfield  Int    @default(0)
  Server    Server @relation(fields: [server_id], references: [id])
}

// Channels

model Channel {
  id               String            @id
  server_id        String
  name             String            @db.VarChar(100)
  type             Int
  parent_id        String?
  parent           Channel?          @relation("ParentChannel", fields: [parent_id], references: [id])
  threads          Channel[]         @relation("ParentChannel")
  server           Server            @relation(fields: [server_id], references: [id])
  channel_settings ChannelSettings[]
}

model ChannelSettings {
  channel_id             String  @id
  bitfield               Int     @default(0)
  last_indexed_snowflake String?
  invite_code            String? @unique @db.VarChar(15)
  solution_tag_id        String?

  channel Channel @relation(fields: [channel_id], references: [id])
}
