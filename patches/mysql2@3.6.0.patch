diff --git a/lib/connection_config.js b/lib/connection_config.js
index ec52051625e44757f378df94f40da2fb3972c230..e2ee9296678f4d3c736b9ca76274abfea6b5c706 100644
--- a/lib/connection_config.js
+++ b/lib/connection_config.js
@@ -57,6 +57,7 @@ const validOptions = {
   timezone: 1,
   trace: 1,
   typeCast: 1,
+  JSONParser: 1,
   uri: 1,
   user: 1,
   // These options are used for Pool
@@ -146,6 +147,7 @@ class ConnectionConfig {
     this.nestTables =
       options.nestTables === undefined ? undefined : options.nestTables;
     this.typeCast = options.typeCast === undefined ? true : options.typeCast;
+    this.JSONParser = options.JSONParser === undefined ? false : options.JSONParser;
     if (this.timezone[0] === ' ') {
       // "+" is a url encoded char for space so it
       // gets translated to space when giving a
diff --git a/lib/parsers/text_parser.js b/lib/parsers/text_parser.js
index 49a128c049a611eb896b9755112beb3be853e0e4..dbc4664dbbf47b05688b236f691a1b7964c58c06 100644
--- a/lib/parsers/text_parser.js
+++ b/lib/parsers/text_parser.js
@@ -60,6 +60,9 @@ function readCodeFor(type, charset, encodingExpr, config, options) {
       // Since for JSON columns mysql always returns charset 63 (BINARY),
       // we have to handle it according to JSON specs and use "utf8",
       // see https://github.com/sidorares/node-mysql2/issues/409
+      if(typeof options.JSONParser === 'function') {
+        return 'options.JSONParser(packet.readLengthCodedString("utf8"))';
+      }
       return 'JSON.parse(packet.readLengthCodedString("utf8"))';
     default:
       if (charset === Charsets.BINARY) {
@@ -77,6 +80,9 @@ function compile(fields, options, config) {
   ) {
     options.typeCast = config.typeCast;
   }
+  if(typeof config.JSONParser === 'function' && typeof options.JSONParser !== 'function') {
+    options.JSONParser = config.JSONParser;
+  }

   function wrap(field, _this) {
     return {
